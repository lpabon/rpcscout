// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: api/rpcscout.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScoutClient is the client API for Scout service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScoutClient interface {
	Ping(ctx context.Context, in *ScoutPingRequest, opts ...grpc.CallOption) (*ScoutPingResponse, error)
	List(ctx context.Context, in *ScoutListRequest, opts ...grpc.CallOption) (*ScoutListResponse, error)
	Delete(ctx context.Context, in *ScoutDeleteRequest, opts ...grpc.CallOption) (*ScoutDeleteResponse, error)
	StreamData(ctx context.Context, in *ScoutStreamDataRequest, opts ...grpc.CallOption) (Scout_StreamDataClient, error)
}

type scoutClient struct {
	cc grpc.ClientConnInterface
}

func NewScoutClient(cc grpc.ClientConnInterface) ScoutClient {
	return &scoutClient{cc}
}

func (c *scoutClient) Ping(ctx context.Context, in *ScoutPingRequest, opts ...grpc.CallOption) (*ScoutPingResponse, error) {
	out := new(ScoutPingResponse)
	err := c.cc.Invoke(ctx, "/rpcscout.Scout/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoutClient) List(ctx context.Context, in *ScoutListRequest, opts ...grpc.CallOption) (*ScoutListResponse, error) {
	out := new(ScoutListResponse)
	err := c.cc.Invoke(ctx, "/rpcscout.Scout/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoutClient) Delete(ctx context.Context, in *ScoutDeleteRequest, opts ...grpc.CallOption) (*ScoutDeleteResponse, error) {
	out := new(ScoutDeleteResponse)
	err := c.cc.Invoke(ctx, "/rpcscout.Scout/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoutClient) StreamData(ctx context.Context, in *ScoutStreamDataRequest, opts ...grpc.CallOption) (Scout_StreamDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Scout_ServiceDesc.Streams[0], "/rpcscout.Scout/StreamData", opts...)
	if err != nil {
		return nil, err
	}
	x := &scoutStreamDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Scout_StreamDataClient interface {
	Recv() (*ScoutStreamDataResponse, error)
	grpc.ClientStream
}

type scoutStreamDataClient struct {
	grpc.ClientStream
}

func (x *scoutStreamDataClient) Recv() (*ScoutStreamDataResponse, error) {
	m := new(ScoutStreamDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScoutServer is the server API for Scout service.
// All implementations must embed UnimplementedScoutServer
// for forward compatibility
type ScoutServer interface {
	Ping(context.Context, *ScoutPingRequest) (*ScoutPingResponse, error)
	List(context.Context, *ScoutListRequest) (*ScoutListResponse, error)
	Delete(context.Context, *ScoutDeleteRequest) (*ScoutDeleteResponse, error)
	StreamData(*ScoutStreamDataRequest, Scout_StreamDataServer) error
	mustEmbedUnimplementedScoutServer()
}

// UnimplementedScoutServer must be embedded to have forward compatible implementations.
type UnimplementedScoutServer struct {
}

func (UnimplementedScoutServer) Ping(context.Context, *ScoutPingRequest) (*ScoutPingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedScoutServer) List(context.Context, *ScoutListRequest) (*ScoutListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedScoutServer) Delete(context.Context, *ScoutDeleteRequest) (*ScoutDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedScoutServer) StreamData(*ScoutStreamDataRequest, Scout_StreamDataServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamData not implemented")
}
func (UnimplementedScoutServer) mustEmbedUnimplementedScoutServer() {}

// UnsafeScoutServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScoutServer will
// result in compilation errors.
type UnsafeScoutServer interface {
	mustEmbedUnimplementedScoutServer()
}

func RegisterScoutServer(s grpc.ServiceRegistrar, srv ScoutServer) {
	s.RegisterService(&Scout_ServiceDesc, srv)
}

func _Scout_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoutPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoutServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcscout.Scout/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoutServer).Ping(ctx, req.(*ScoutPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scout_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoutListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoutServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcscout.Scout/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoutServer).List(ctx, req.(*ScoutListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scout_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoutDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoutServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcscout.Scout/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoutServer).Delete(ctx, req.(*ScoutDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scout_StreamData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ScoutStreamDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScoutServer).StreamData(m, &scoutStreamDataServer{stream})
}

type Scout_StreamDataServer interface {
	Send(*ScoutStreamDataResponse) error
	grpc.ServerStream
}

type scoutStreamDataServer struct {
	grpc.ServerStream
}

func (x *scoutStreamDataServer) Send(m *ScoutStreamDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Scout_ServiceDesc is the grpc.ServiceDesc for Scout service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scout_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcscout.Scout",
	HandlerType: (*ScoutServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Scout_Ping_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Scout_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Scout_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamData",
			Handler:       _Scout_StreamData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/rpcscout.proto",
}

// ScoutIdentityClient is the client API for ScoutIdentity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScoutIdentityClient interface {
	Version(ctx context.Context, in *ScoutIdentityVersionRequest, opts ...grpc.CallOption) (*ScoutIdentityVersionResponse, error)
}

type scoutIdentityClient struct {
	cc grpc.ClientConnInterface
}

func NewScoutIdentityClient(cc grpc.ClientConnInterface) ScoutIdentityClient {
	return &scoutIdentityClient{cc}
}

func (c *scoutIdentityClient) Version(ctx context.Context, in *ScoutIdentityVersionRequest, opts ...grpc.CallOption) (*ScoutIdentityVersionResponse, error) {
	out := new(ScoutIdentityVersionResponse)
	err := c.cc.Invoke(ctx, "/rpcscout.ScoutIdentity/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScoutIdentityServer is the server API for ScoutIdentity service.
// All implementations must embed UnimplementedScoutIdentityServer
// for forward compatibility
type ScoutIdentityServer interface {
	Version(context.Context, *ScoutIdentityVersionRequest) (*ScoutIdentityVersionResponse, error)
	mustEmbedUnimplementedScoutIdentityServer()
}

// UnimplementedScoutIdentityServer must be embedded to have forward compatible implementations.
type UnimplementedScoutIdentityServer struct {
}

func (UnimplementedScoutIdentityServer) Version(context.Context, *ScoutIdentityVersionRequest) (*ScoutIdentityVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedScoutIdentityServer) mustEmbedUnimplementedScoutIdentityServer() {}

// UnsafeScoutIdentityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScoutIdentityServer will
// result in compilation errors.
type UnsafeScoutIdentityServer interface {
	mustEmbedUnimplementedScoutIdentityServer()
}

func RegisterScoutIdentityServer(s grpc.ServiceRegistrar, srv ScoutIdentityServer) {
	s.RegisterService(&ScoutIdentity_ServiceDesc, srv)
}

func _ScoutIdentity_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoutIdentityVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoutIdentityServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcscout.ScoutIdentity/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoutIdentityServer).Version(ctx, req.(*ScoutIdentityVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScoutIdentity_ServiceDesc is the grpc.ServiceDesc for ScoutIdentity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScoutIdentity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcscout.ScoutIdentity",
	HandlerType: (*ScoutIdentityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _ScoutIdentity_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/rpcscout.proto",
}
